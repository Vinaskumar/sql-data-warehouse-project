
--------Database Exploration------------

-- Explore all objects in the database
SELECT * FROM INFORMATION_SCHEMA.TABLES

-- Explore all columns in the database
SELECT * FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'dim_customers'


--------Dimension Exploration------------

-- Explore all countries our costomers comes from
SELECT DISTINCT country
FROM gold.dim_customers

-- Explore all categories & subcategories
SELECT DISTINCT category, subcategory
FROM gold.dim_products

-- Explore all products in details
SELECT DISTINCT category, subcategory, product_name
FROM gold.dim_products
ORDER BY 1,2,3


--------Date Exploration------------

-- Find the date of first and last order
-- How many years of sales are available
SELECT 
MIN(order_date) first_order_date, 
MAX(order_date) last_order_date,
DATEDIFF(month, MIN(order_date), MAX(order_date)) order_range_months
FROM gold.fact_sales

-- Find the details of youngest and oldest customer
SELECT *
FROM gold.dim_customers
WHERE birth_date = (SELECT MIN(birth_date) FROM gold.dim_customers)
	  OR birth_date = (SELECT MAX(birth_date) FROM gold.dim_customers)

-- Age of youngest and oldest customers
SELECT
DATEDIFF(year, MIN(birth_date), GETDATE()) AS oldest_age,
DATEDIFF(year, MAX(birth_date), GETDATE()) AS youngest_age
FROM gold.dim_customers


--------Measures Exploration------------

-- Find the total sales
SELECT SUM(sales) total_sales
FROM gold.fact_sales

-- Find how many items are sold
SELECT SUM(quantity) total_items_sold
FROM gold.fact_sales

-- Find average selling price
SELECT AVG(price) avg_price
FROM gold.fact_sales

-- Find total number of orders
SELECT COUNT(DISTINCT order_number) total_orders
FROM gold.fact_sales

-- Find total number of products
SELECT COUNT(product_key) total_products
FROM gold.dim_products

-- Find total number of customers
SELECT COUNT(customer_id) total_customers
FROM gold.dim_customers

-- Find total number of customers that has placed orders
SELECT COUNT(DISTINCT customer_key) customers_placed_order
FROM gold.fact_sales

-- Generate report that shows all key metrics of the business

SELECT 'Total Sales' as measure_name, SUM(sales) as measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Total Quantity' as measure_name, SUM(quantity) as measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Average Price' as measure_name, AVG(price) as measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Total Orders' as measure_name, COUNT(DISTINCT order_number) as measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Total Products' as measure_name, COUNT(product_key) as measure_value FROM gold.dim_products
UNION ALL
SELECT 'Total Customers' as measure_name, COUNT(customer_id) as measure_value FROM gold.dim_customers
UNION ALL
SELECT 'Total Customers Placed Orders' as measure_name, COUNT(DISTINCT customer_key) as measure_value FROM gold.fact_sales


--------- Magnitude (Measures by Dimension)----------

-- Find total customers by country
SELECT country, COUNT(customer_id) as total_customers
FROM gold.dim_customers
GROUP BY country
ORDER BY 2 DESC

-- Find total customers by gender
SELECT gender, COUNT(customer_id) as total_customers
FROM gold.dim_customers
GROUP BY gender
ORDER BY 2 DESC

-- Find total products by category
SELECT category, COUNT(product_id) as total_products
FROM gold.dim_products
GROUP BY category
ORDER BY 2 DESC

-- What is the average costs in each category?
SELECT category, AVG(cost) as avg_cost
FROM gold.dim_products
GROUP BY category
ORDER BY 2 DESC

-- What is the total revenue generated for each category?
SELECT category, SUM(s.sales) as total_revenue
FROM gold.fact_sales s
LEFT JOIN gold.dim_products p
ON s.product_key = p.product_key
GROUP BY p.category
ORDER BY 2 DESC

-- Find total revenue generated by each customer
SELECT c.customer_key, c.first_name, c.last_name, SUM(s.sales) as total_revenue
FROM gold.fact_sales s
LEFT JOIN gold.dim_customers c
ON s.customer_key = c.customer_key
GROUP BY c.customer_key, c.first_name, c.last_name
ORDER BY total_revenue DESC

-- What is the distribution of sold items across countries?
SELECT c.country, SUM(s.quantity) as total_sold_items
FROM gold.fact_sales s
LEFT JOIN gold.dim_customers c
ON s.customer_key = c.customer_key
GROUP BY c.country
ORDER BY total_sold_items DESC

--------- Ranking (Top N / Bottom N)----------

-- Which 5 products generate the highest revenue?
SELECT TOP 5 p.product_name, SUM(s.sales) as total_revenue
FROM gold.fact_sales s
LEFT JOIN gold.dim_products p
ON s.product_key = p.product_key
GROUP BY p.product_name
ORDER BY total_revenue DESC

-- What are the 5 worst performing products in terms of sales?
SELECT TOP 5 p.product_name, SUM(s.sales) as total_revenue
FROM gold.fact_sales s
LEFT JOIN gold.dim_products p
ON s.product_key = p.product_key
GROUP BY p.product_name
ORDER BY total_revenue 

-- Which 5 subcategories generate the highest revenue?
SELECT subcategory, total_revenue
FROM(
	SELECT TOP 5 p.subcategory, 
				SUM(s.sales) as total_revenue,
				ROW_NUMBER() OVER (PARTITION BY p.subcategory ORDER BY SUM(s.sales) DESC) as number
	FROM gold.fact_sales s
	LEFT JOIN gold.dim_products p
	ON s.product_key = p.product_key
	GROUP BY p.subcategory) t
WHERE t.number <= 5

-- What are the 5 worst performing subcategories in terms of sales?
SELECT subcategory, total_revenue
FROM(
	SELECT TOP 5 p.subcategory, 
				SUM(s.sales) as total_revenue,
				ROW_NUMBER() OVER (PARTITION BY p.subcategory ORDER BY SUM(s.sales)) as number
	FROM gold.fact_sales s
	LEFT JOIN gold.dim_products p
	ON s.product_key = p.product_key
	GROUP BY p.subcategory) t
WHERE t.number <= 5

-- Find the top 10 customers who have generated the highest revenue
SELECT TOP 10 c.customer_key, c.first_name, c.last_name, SUM(s.sales) as total_revenue
FROM gold.fact_sales s
LEFT JOIN gold.dim_customers c
ON s.customer_key = c.customer_key
GROUP BY c.customer_key, c.first_name, c.last_name
ORDER BY total_revenue DESC

-- The 10 customers with the fewest orders placed
SELECT TOP 10 c.customer_key, c.first_name, c.last_name, COUNT( DISTINCT s.order_number) as orders_placed
FROM gold.fact_sales s
LEFT JOIN gold.dim_customers c
ON s.customer_key = c.customer_key
GROUP BY c.customer_key, c.first_name, c.last_name
ORDER BY orders_placed
